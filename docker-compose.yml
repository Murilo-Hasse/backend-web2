# docker-compose.yaml
services:
  postgres:
    image: postgres:17.5
    container_name: postgres_web
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

  mongodb:
    image: mongo:6
    container_name: mongodb_web
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_DB: ${MONGO_DB}

  app:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: api_web
    restart: always
    ports:
      - "3000:3000"
    depends_on:
      - postgres
      - mongodb
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}

      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_DB: ${MONGO_DB}
      MONGO_PORT: ${MONGO_PORT}
      MONGO_HOST: ${MONGO_HOST}

      APP_PORT: ${APP_PORT}
    # Adiciona um comando para esperar o PostgreSQL antes de iniciar a aplicação
    command: sh -c 'while ! nc -z postgres 5432; do echo "Waiting for Postgres..."; sleep 0.5; done; npm run dev'

volumes:
  postgres_data:
  mongo_data:
